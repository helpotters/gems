# lib/node.rb
# frozen_string_literal: true

# Creates Linked Lists
module NodeList
  # Linked List with Info About Data, Parent, and Child
  class Node
    attr_reader :data
    attr_accessor :child, :parent

    def initialize(data)
      @data = data
      @parent = []
      @child = nil
    end
  end
end

# The manuvers a Collatz obj can perform
module Operations
  def even(num)
    num / 2
  end

  def odd(num)
    (num * 3) + 1
  end

  def create_node(num = @start_num)
    NodeList::Node.new(num)
  end
end

# Explores for Possibly Longer Routes
module ChainExplorer
  def up_analyze(node = @node)
    factors = parent_factors(node.data)
    factors.each { |factor| node.parent.push(create_node(factor)) }
  end

  def parent_factors(value = @node.data)
    factors = []
    even_factor = value * 2
    odd_factor = (value - 1).to_d / 3.to_d # #to_d to avoid rounding errors
    factors.push(odd_factor.to_i) if (odd_factor % 1).zero?
    factors.push(even_factor) if (even_factor % 1).zero?
  end
end
